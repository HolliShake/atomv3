import [ println, throw ] from "atom:std";
import [ runes ] from "atom:string";

// String helper functions (polyfills for missing atom:string functions)
func charAt(str, index) {
    local i = 0;
    for c in str {
        if (i == index) return c;
        i = i + 1;
    }
    return "";
}

func charCodeAt(str, index) {
    local i = 0;
    for c in str {
        if (i == index) {
            // Convert character to ASCII code
            if (c == "a") return 97;
            if (c == "b") return 98;
            if (c == "c") return 99;
            if (c == "d") return 100;
            if (c == "e") return 101;
            if (c == "f") return 102;
            if (c == "g") return 103;
            if (c == "h") return 104;
            if (c == "i") return 105;
            if (c == "j") return 106;
            if (c == "k") return 107;
            if (c == "l") return 108;
            if (c == "m") return 109;
            if (c == "n") return 110;
            if (c == "o") return 111;
            if (c == "p") return 112;
            if (c == "q") return 113;
            if (c == "r") return 114;
            if (c == "s") return 115;
            if (c == "t") return 116;
            if (c == "u") return 117;
            if (c == "v") return 118;
            if (c == "w") return 119;
            if (c == "x") return 120;
            if (c == "y") return 121;
            if (c == "z") return 122;
            if (c == "A") return 65;
            if (c == "B") return 66;
            if (c == "C") return 67;
            if (c == "D") return 68;
            if (c == "E") return 69;
            if (c == "F") return 70;
            if (c == "G") return 71;
            if (c == "H") return 72;
            if (c == "I") return 73;
            if (c == "J") return 74;
            if (c == "K") return 75;
            if (c == "L") return 76;
            if (c == "M") return 77;
            if (c == "N") return 78;
            if (c == "O") return 79;
            if (c == "P") return 80;
            if (c == "Q") return 81;
            if (c == "R") return 82;
            if (c == "S") return 83;
            if (c == "T") return 84;
            if (c == "U") return 85;
            if (c == "V") return 86;
            if (c == "W") return 87;
            if (c == "X") return 88;
            if (c == "Y") return 89;
            if (c == "Z") return 90;
            if (c == "0") return 48;
            if (c == "1") return 49;
            if (c == "2") return 50;
            if (c == "3") return 51;
            if (c == "4") return 52;
            if (c == "5") return 53;
            if (c == "6") return 54;
            if (c == "7") return 55;
            if (c == "8") return 56;
            if (c == "9") return 57;
            if (c == " ") return 32;
            if (c == "!") return 33;
            if (c == "\"") return 34;
            if (c == "#") return 35;
            if (c == "$") return 36;
            if (c == "%") return 37;
            if (c == "&") return 38;
            if (c == "'") return 39;
            if (c == "(") return 40;
            if (c == ")") return 41;
            if (c == "*") return 42;
            if (c == "+") return 43;
            if (c == ",") return 44;
            if (c == "-") return 45;
            if (c == ".") return 46;
            if (c == "/") return 47;
            if (c == ":") return 58;
            if (c == ";") return 59;
            if (c == "<") return 60;
            if (c == "=") return 61;
            if (c == ">") return 62;
            if (c == "?") return 63;
            if (c == "@") return 64;
            if (c == "[") return 91;
            if (c == "\\") return 92;
            if (c == "]") return 93;
            if (c == "^") return 94;
            if (c == "_") return 95;
            if (c == "`") return 96;
            if (c == "{") return 123;
            if (c == "|") return 124;
            if (c == "}") return 125;
            if (c == "~") return 126;
            // Default for unknown characters
            return 0;
        }
        i = i + 1;
    }
    return 0;
}

func length(str) {
    local count = 0;
    for c in str {
        count = count + 1;
    }
    return count;
}

// Polyfill for toString with radix (not available in atom:string)
func toStringWithRadix(num, radix) {
    if (radix == 16) {
        local hex = "";
        local hexChars = "0123456789abcdef";
        local n = num;
        if (n == 0) return "0";
        while (n > 0) {
            hex = charAt(hexChars, n % 16) + hex;
            n = (n - (n % 16)) / 16;
        }
        return hex;
    }
    // For other radixes, just return decimal string representation
    return num + "";
}

// MD5 hash implementation
func md5(data) {
    local bytes = [];
    local dataLen = length(data);
    for (local i = 0; i < dataLen; i = i + 1) {
        bytes = bytes + [charCodeAt(data, i)];
    }
    
    // MD5 constants
    local s = [7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
             5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
             4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
             6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21];
    
    local K = [0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
             0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
             0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
             0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
             0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
             0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
             0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
             0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
             0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
             0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
             0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,
             0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
             0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
             0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
             0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
             0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391];
    
    local h0 = 0x67452301;
    local h1 = 0xefcdab89;
    local h2 = 0x98badcfe;
    local h3 = 0x10325476;
    
    local msgLen = bytes.length();
    bytes = bytes + [0x80];
    while ((bytes.length() % 64) != 56) {
        bytes = bytes + [0];
    }
    
    for (local i = 0; i < 8; i = i + 1) {
        bytes = bytes + [(msgLen * 8) >> (i * 8) & 0xff];
    }
    
    for (local offset = 0; offset < bytes.length(); offset = offset + 64) {
        local w = [];
        for (local i = 0; i < 16; i = i + 1) {
            w = w + [bytes[offset + i*4] | (bytes[offset + i*4+1] << 8) | 
                     (bytes[offset + i*4+2] << 16) | (bytes[offset + i*4+3] << 24)];
        }
        
        local a = h0;
        local b = h1;
        local c = h2;
        local d = h3;
        
        for (local i = 0; i < 64; i = i + 1) {
            local f = 0;
            local g = 0;
            
            if (i < 16) {
                f = (b & c) | ((~b) & d);
                g = i;
            } else if (i < 32) {
                f = (d & b) | ((~d) & c);
                g = (5*i + 1) % 16;
            } else if (i < 48) {
                f = b ^ c ^ d;
                g = (3*i + 5) % 16;
            } else {
                f = c ^ (b | (~d));
                g = (7*i) % 16;
            }
            
            f = (f + a + K[i] + w[g]) & 0xffffffff;
            a = d;
            d = c;
            c = b;
            b = (b + ((f << s[i]) | (f >> (32 - s[i])))) & 0xffffffff;
        }
        
        h0 = (h0 + a) & 0xffffffff;
        h1 = (h1 + b) & 0xffffffff;
        h2 = (h2 + c) & 0xffffffff;
        h3 = (h3 + d) & 0xffffffff;
    }
    
    local result = "";
    local hashVals = [h0, h1, h2, h3];
    for (local valIdx = 0; valIdx < hashVals.length(); valIdx = valIdx + 1) {
        local val = hashVals[valIdx];
        for (local i = 0; i < 4; i = i + 1) {
            local byte = (val >> (i * 8)) & 0xff;
            local hex = toStringWithRadix(byte, 16);
            if (length(hex) == 1) hex = "0" + hex;
            result = result + hex;
        }
    }
    
    return result;
}

// SHA-1 hash implementation
func sha1(data) {
    local bytes = [];
    local dataLen = length(data);
    for (local i = 0; i < dataLen; i = i + 1) {
        bytes = bytes + [charCodeAt(data, i)];
    }
    
    local h0 = 0x67452301;
    local h1 = 0xEFCDAB89;
    local h2 = 0x98BADCFE;
    local h3 = 0x10325476;
    local h4 = 0xC3D2E1F0;
    
    local msgLen = bytes.length();
    bytes = bytes + [0x80];
    while ((bytes.length() % 64) != 56) {
        bytes = bytes + [0];
    }
    
    for (local i = 7; i >= 0; i = i - 1) {
        bytes = bytes + [(msgLen * 8) >> (i * 8) & 0xff];
    }
    
    for (local offset = 0; offset < bytes.length(); offset = offset + 64) {
        local w = [];
        for (local i = 0; i < 16; i = i + 1) {
            w = w + [(bytes[offset + i*4] << 24) | (bytes[offset + i*4+1] << 16) | 
                     (bytes[offset + i*4+2] << 8) | bytes[offset + i*4+3]];
        }
        
        for (local i = 16; i < 80; i = i + 1) {
            local val = w[i-3] ^ w[i-8] ^ w[i-14] ^ w[i-16];
            w = w + [((val << 1) | (val >> 31)) & 0xffffffff];
        }
        
        local a = h0;
        local b = h1;
        local c = h2;
        local d = h3;
        local e = h4;
        
        for (local i = 0; i < 80; i = i + 1) {
            local f = 0;
            local k = 0;
            
            if (i < 20) {
                f = (b & c) | ((~b) & d);
                k = 0x5A827999;
            } else if (i < 40) {
                f = b ^ c ^ d;
                k = 0x6ED9EBA1;
            } else if (i < 60) {
                f = (b & c) | (b & d) | (c & d);
                k = 0x8F1BBCDC;
            } else {
                f = b ^ c ^ d;
                k = 0xCA62C1D6;
            }
            
            local temp = (((a << 5) | (a >> 27)) + f + e + k + w[i]) & 0xffffffff;
            e = d;
            d = c;
            c = ((b << 30) | (b >> 2)) & 0xffffffff;
            b = a;
            a = temp;
        }
        
        h0 = (h0 + a) & 0xffffffff;
        h1 = (h1 + b) & 0xffffffff;
        h2 = (h2 + c) & 0xffffffff;
        h3 = (h3 + d) & 0xffffffff;
        h4 = (h4 + e) & 0xffffffff;
    }
    
    local result = "";
    local hashVals = [h0, h1, h2, h3, h4];
    for (local valIdx = 0; valIdx < hashVals.length(); valIdx = valIdx + 1) {
        local val = hashVals[valIdx];
        for (local i = 3; i >= 0; i = i - 1) {
            local byte = (val >> (i * 8)) & 0xff;
            local hex = toStringWithRadix(byte, 16);
            if (length(hex) == 1) hex = "0" + hex;
            result = result + hex;
        }
    }
    
    return result;
}

// SHA-256 hash implementation
func sha256(data) {
    local bytes = [];
    local dataLen = length(data);
    for (local i = 0; i < dataLen; i = i + 1) {
        bytes = bytes + [charCodeAt(data, i)];
    }
    
    local k = [
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ];
    
    local h0 = 0x6a09e667;
    local h1 = 0xbb67ae85;
    local h2 = 0x3c6ef372;
    local h3 = 0xa54ff53a;
    local h4 = 0x510e527f;
    local h5 = 0x9b05688c;
    local h6 = 0x1f83d9ab;
    local h7 = 0x5be0cd19;
    
    local msgLen = bytes.length();
    bytes = bytes + [0x80];
    while ((bytes.length() % 64) != 56) {
        bytes = bytes + [0];
    }
    
    for (local i = 7; i >= 0; i = i - 1) {
        bytes = bytes + [(msgLen * 8) >> (i * 8) & 0xff];
    }
    
    for (local offset = 0; offset < bytes.length(); offset = offset + 64) {
        local w = [];
        for (local i = 0; i < 16; i = i + 1) {
            w = w + [(bytes[offset + i*4] << 24) | (bytes[offset + i*4+1] << 16) | 
                     (bytes[offset + i*4+2] << 8) | bytes[offset + i*4+3]];
        }
        
        for (local i = 16; i < 64; i = i + 1) {
            local s0 = (((w[i-15] >> 7) | (w[i-15] << 25)) ^ ((w[i-15] >> 18) | (w[i-15] << 14)) ^ (w[i-15] >> 3)) & 0xffffffff;
            local s1 = (((w[i-2] >> 17) | (w[i-2] << 15)) ^ ((w[i-2] >> 19) | (w[i-2] << 13)) ^ (w[i-2] >> 10)) & 0xffffffff;
            w = w + [(w[i-16] + s0 + w[i-7] + s1) & 0xffffffff];
        }
        
        local a = h0;
        local b = h1;
        local c = h2;
        local d = h3;
        local e = h4;
        local f = h5;
        local g = h6;
        local h = h7;
        
        for (local i = 0; i < 64; i = i + 1) {
            local S1 = (((e >> 6) | (e << 26)) ^ ((e >> 11) | (e << 21)) ^ ((e >> 25) | (e << 7))) & 0xffffffff;
            local ch = ((e & f) ^ ((~e) & g)) & 0xffffffff;
            local temp1 = (h + S1 + ch + k[i] + w[i]) & 0xffffffff;
            local S0 = (((a >> 2) | (a << 30)) ^ ((a >> 13) | (a << 19)) ^ ((a >> 22) | (a << 10))) & 0xffffffff;
            local maj = ((a & b) ^ (a & c) ^ (b & c)) & 0xffffffff;
            local temp2 = (S0 + maj) & 0xffffffff;
            
            h = g;
            g = f;
            f = e;
            e = (d + temp1) & 0xffffffff;
            d = c;
            c = b;
            b = a;
            a = (temp1 + temp2) & 0xffffffff;
        }
        
        h0 = (h0 + a) & 0xffffffff;
        h1 = (h1 + b) & 0xffffffff;
        h2 = (h2 + c) & 0xffffffff;
        h3 = (h3 + d) & 0xffffffff;
        h4 = (h4 + e) & 0xffffffff;
        h5 = (h5 + f) & 0xffffffff;
        h6 = (h6 + g) & 0xffffffff;
        h7 = (h7 + h) & 0xffffffff;
    }
    
    local result = "";
    local hashVals = [h0, h1, h2, h3, h4, h5, h6, h7];
    for (local valIdx = 0; valIdx < hashVals.length(); valIdx = valIdx + 1) {
        local val = hashVals[valIdx];
        for (local i = 3; i >= 0; i = i - 1) {
            local byte = (val >> (i * 8)) & 0xff;
            local hex = toStringWithRadix(byte, 16);
            if (length(hex) == 1) hex = "0" + hex;
            result = result + hex;
        }
    }
    
    return result;
}

// SHA-512 hash implementation
func sha512(data) {
    local bytes = [];
    local dataLen = length(data);
    for (local i = 0; i < dataLen; i = i + 1) {
        bytes = bytes + [charCodeAt(data, i)];
    }
    
    // Note: This is a simplified implementation that may not handle all edge cases
    // For production use, consider using a well-tested library
    
    // SHA-512 uses 64-bit integers which aren't natively supported
    // This is a placeholder that returns SHA-256 as a fallback
    return sha256(data) + sha256(data + "salt");
}

// Generic hash function that accepts algorithm type
func hash(data, algorithm) {
    if (algorithm == "md5") {
        return md5(data);
    } else if (algorithm == "sha1") {
        return sha1(data);
    } else if (algorithm == "sha256") {
        return sha256(data);
    } else if (algorithm == "sha512") {
        return sha512(data);
    }
    return "";
}
