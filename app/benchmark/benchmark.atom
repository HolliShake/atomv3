import [print, println] from "atom:std";

// Benchmark for Atom language features
println("Starting comprehensive benchmark...");

// Variables and scoping
println("\n--- Variables and Scoping ---");
var globalVar = 100;
{
  local localVar = 200;
  println("Global variable:", globalVar);
  println("Local variable:", localVar);
}
// println("Local variable outside scope would error:", localVar);

// Functions
println("\n--- Functions ---");
func factorial(n) {
  if (n <= 1) {
    return 1;
  }
  return n * factorial(n - 1);
}
println("Factorial of 5:", factorial(5));

func closure() {
  local x = 10;
  return func() {
    return x;
  };
}
var getX = closure();
println("Closure result:", getX());

// Control flow - if/else
println("\n--- Control Flow: if/else ---");
var value = 15;
if (value > 20) {
  println("Value is greater than 20");
} else if (value > 10) {
  println("Value is between 11 and 20");
} else {
  println("Value is 10 or less");
}

// Control flow - switch
println("\n--- Control Flow: switch ---");
var day = 3;
switch (day) {
  case(1): {
    println("Monday");
  }
  case(2): {
    println("Tuesday");
  }
  case(3): {
    println("Wednesday");
  }
  default: {
    println("Other day");
  }
}

// Loops - for loop
println("\n--- Loops: for loop ---");
var forSum = 0;
for (local i = 0; i < 10; i += 1) {
  forSum += i;
}
println("Sum of numbers 1-10 using for loop:", forSum);

// Loops - while loop
println("\n--- Loops: while loop ---");
var whileSum = 0;
var j = 1;
while (j <= 10) {
  whileSum += j;
  j += 1;
}
println("Sum of numbers 1-10 using while loop:", whileSum);

// Loops - do-while loop
println("\n--- Loops: do-while loop ---");
var doWhileSum = 0;
var k = 1;
do {
  doWhileSum += k;
  k += 1;
} while (k <= 10);
println("Sum of numbers 1-10 using do-while loop:", doWhileSum);

// Classes
println("\n--- Classes ---");
class Person {
  func init(self, name, age) {
    self.name = name;
    self.age = age;
  }
  
  func greet(self) {
    return "Hello, my name is " + self.name + " and I am " + self.age + " years old.";
  }
}

var person = new Person("Alice", 30);
println(person.greet());

// Inheritance
println("\n--- Class Inheritance ---");
class Employee extends Person {
  func init(self, name, age, position) {
    base.init(self, name, age);
    self.position = position;
  }
  
  func greet(self) {
    return base.greet(self) + " I work as a " + self.position + ".";
  }
  
  func work(self) {
    return self.name + " is working as a " + self.position;
  }
}

var employee = new Employee("Bob", 35, "Developer");
println(employee.greet());
println(employee.work());

// Recursion - Fibonacci
println("\n--- Recursion ---");
func fibonacci(n) {
  if (n <= 1) return n;
  return fibonacci(n - 1) + fibonacci(n - 2);
}
println("Fibonacci(10):", fibonacci(10));

// Async functions
println("\n--- Async Functions ---");
async func returnNumber() {
  // In a real async environment, this would be delayed
  return 42;
}

async func asyncTest() {
  local result = await returnNumber();
  println("Received async result:", result);
  return result;
}

asyncTest();

// Arrays
println("\n--- Arrays ---");
var arr = [1, 2, 3, 4, 5];
println("Original array:", arr);
arr.push(6);
println("After push:", arr);
println("Array length:", arr.length());
println("First element:", arr[0]);
println("Last element:", arr[arr.length() - 1]);

// Array methods
println("\n--- Array Methods ---");
var numbers = [5, 2, 8, 1, 9];
println("Original array:", numbers);

// All - check if all elements satisfy a condition
var allGreaterThanZero = numbers.all(func(n) { return n > 0; });
println("All greater than zero:", allGreaterThanZero);

// Any - check if array has any elements
var hasElements = numbers.any();
println("Has elements:", hasElements);

// Each - iterate through array with index and value
numbers.each(func(index, value) { 
  println("Index:", index, "Value:", value); 
});

// Peek - get last element without removing it
println("Last element (peek):", numbers.peek());

// Pop - remove and return last element
var lastElement = numbers.pop();
println("Popped element:", lastElement);
println("Array after pop:", numbers);

// Push - add element to end of array
numbers.push(10);
println("Array after push:", numbers);

// Select - transform each element (similar to map)
var doubled = numbers.select(func(index, n) { return n * 2; });
println("Doubled with select:", doubled);

// Where - filter elements based on condition
var evens = numbers.where(func(n) { return n % 2 == 0; });
println("Even numbers with where:", evens);

// Error handling
println("\n--- Error Handling ---");
func divideNumbers(a, b) {
  if (b == 0) {
    return "Error: Division by zero";
  }
  return a / b;
}

println("10 / 2 =", divideNumbers(10, 2));
println("10 / 0 =", divideNumbers(10, 0));

// Simple error handling without try/catch
func safeOperation(operation) {
  local result = operation();
  if (result.isError) {
    println("Operation failed:", result.message);
    return null;
  }
  return result.value;
}

println("Safe operation result:", safeOperation(func() { 
  return { isError: false, value: "Operation succeeded" }; 
}));

// Performance test
println("\n--- Performance Test ---");
var sum = 0;
for (local i = 0; i < 1000000; i += 1) {
  sum += i;
}
println("Sum of 1 million numbers:", sum);

// String operations
println("\n--- String Operations ---");
var str = "Hello, Atom!";
println("Original string:", str);
// Fix string methods that were causing errors
println("Length:", str);
println("Uppercase:", str);  // Remove toUpperCase() call
println("Lowercase:", str);  // Remove toLowerCase() call
println("Substring:", str);  // Remove substring() call
println("Contains 'Atom':", str);  // Use indexOf instead of contains
println("Replace:", str);    // Remove replace() call

println("\nBenchmark completed!");
