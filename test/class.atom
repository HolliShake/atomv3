import [ println ] from "atom:std";
import "gui";
import "hash";
import "./imports.atom";

var cat = 20;

(async func() {
    println("Hello World");
})();

class Animal {
    func init(self, name) {
        self.name = name;
    }

    // Common property for an animals
    func eat(self, food) {
        std.println(self.name + " is eating " + food);
    }
}

func reg() {
    (3 / 0) catch (err) {
        std.println(">>>", err);
    };
    return 2;
}

async func waitable() {
    return await reg() + 23;
}

class Dog extends Animal {
    local x = 2;
    func init(self, name, ageInMonths) {
        println("cat", cat);
        cat = 1000;
        println("cat", cat);
        self.name = name;
        self.age = ageInMonths;

        println("constructor->self >>", self);
    }

    async func process(self) {
        println("process->self >>", self);
        return await waitable();
    }
}

const dog = new Dog("Buddy", 12);
std.println(dog);

const d = dog.eat("bone");

std.println(">>", d, dog.process());

std.println(gui.getName());

std.println(gui, hash, imports.factorial(5));

println(cat);

async func add(a, b) {
    return a + b;
}

println("+------------------+");
println("| Decompiled Code  |");
println("+------------------+");
println(std.decompile(add), "\n=", add(60, 9));


const call = func(n) {
   {
        cat += 2;
        println("call", n, cat);
        return 2;
   }
};

call(1000+cat);

func ret() {
    local g = 2;
    return func() {
        println(">>", g += 2, 0xff, 0b1010, 0o2);
    };
}

ret()();

var x = 0;

for (x = 0; x < 10; x += 2) {
    println(">>", x);
}

println(x);