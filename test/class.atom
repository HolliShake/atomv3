import [ println ] from "atom:std";
import "atom:object";
import "atom:math";
import "gui";
import "hash";
import "../test/imports.atom";

var cat = 20;

(async func() {
    println("Hello World");
})();

class Animal {
    func init(self, name) {
        self.name = name;
    }

    // Common property for an animals
    func eat(self, food) {
        std.println(self.name + " is eating " + food);
    }
}

func reg() {
    (3 / 0) catch (err) {
        std.println(">>>", err);
    };
    return 2;
}

async func waitable() {
    return await reg() + 23;
}

class Dog extends Animal {
    local x = 2;
    func init(self, name, ageInMonths) {
        println("cat", cat);
        cat = 1000;
        println("cat", cat);
        self.name = name;
        self.age = ageInMonths;

        println("constructor->self >>", self);
    }

    async func process(self) {
        println("process->self >>", self);
        return await waitable();
    }
}

Dog.fooc = func(self) {
    println("fooc->self >>", self);
};

const dog = new Dog("Buddy", 12);
std.println(dog);

const d = dog.eat("bone");

std.println("d>>", d, dog.process());

std.println(gui.getName());

std.println(gui, hash, imports.factorial(5));

println(cat);

async func add(a, b) {
    return a + b;
}

println("+------------------+");
println("| Decompiled Code  |");
println("+------------------+");
println(std.decompile(add), "\n=", add(60, 9));


const call = func(n) {
   {
        cat += 2;
        println("call", n, cat);
        return 2;
   }
};

call(1000+cat);

func ret() {
    local g = 2;
    return func() {
        println(">>", g += 2, 0xff, 0b1010, 0o2);
    };
}

ret()();


for (local x = 0; x <= 10; x += 1) {
    println(">>", x);
}

const array = [1,2,3,4,5];

println(">", array.all(func(x) {
    return x != 20;
}));

println(array.select(func(x, index) {
    return x + index;
}).length());

println("|>>", array
    .push(6)
    .push(7)
    .push(8)
    .select(func(n, index) {
        return n;
    })
    .where(func(n) {
        return n > 5;
    })
    .select(func(n, index) {
        return n * 2;
    })
    .where(func(n) {
        return n == "asdasdasd";
    })
    .any());

println(object.keys({
    H: 200
}));

println(object.values({
    H: 200
}));

println('2' + math.rand(1000), math.sqrt(4), math.pow(2, 5), imports.factorial(5));

dog.getNames = 2;

println(dog.fooc(), dog, Dog);

class Person {
    func init(self, _name, _age) {
        self.name = _name;
        self.age = _age;
        println("init -> class", Person);
    }

    func create(_name, _age) {
        return new Person(_name, _age);
    }
}

for (local h = 0;h < 1; h++) {
    println(Person.create("Person", h));
}

import "atom:path";
import "date";

println(path.cwd(), path.join(path.cwd(), "this", "time"), date.Date.create(), 2.2e2);

import "atom:os";

namespace Monkey/King {

    var x = 2;

    func printName(dog) {
        println(dog);
    }
}

Monkey::King::printName(dog);

os.exit(os.success);